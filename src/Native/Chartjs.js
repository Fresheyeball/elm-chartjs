// Generated by LiveScript 1.4.0
(function(){
  var ref$, make;
  Elm.Native || (Elm.Native = {});
  (ref$ = Elm.Native).Chartjs || (ref$.Chartjs = {});
  make = function(x){
    return Elm.Native.Chartjs = {
      make: x
    };
  };
  make(function(localRuntime){
    var ref$, v, NativeElement, toArray, px, createNode, genLineChart, setWrapSize, update, render, showRGBA, lineChartRaw;
    localRuntime.Native || (localRuntime.Native = {});
    (ref$ = localRuntime.Native).Chartjs || (ref$.Chartjs = {});
    if (v = localRuntime.Native.Chartjs.values) {
      return v;
    }
    NativeElement = Elm.Native.Graphics.Element.make(localRuntime);
    toArray = Elm.Native.List.make(localRuntime).toArray;
    px = function(x){
      return x + "px";
    };
    Chart.defaults.global.animation = false;
    createNode = function(elementType){
      var n;
      n = document.createElement(elementType);
      n.style.padding = 0;
      n.style.margin = 0;
      n.style.position = "relative";
      return n;
    };
    genLineChart = function(arg$, canvas){
      var w, h, data, options;
      w = arg$.w, h = arg$.h, data = arg$.data, options = arg$.options;
      return new Chart(canvas.getContext("2d")).Line(data, options);
    };
    setWrapSize = function(wrap, arg$){
      var w, h, canvas, ratio;
      w = arg$.w, h = arg$.h;
      wrap.style.width = px(w);
      wrap.style.height = px(h);
      canvas = wrap.firstChild;
      canvas.style.width = px(w);
      canvas.style.height = px(h);
      canvas.style.display = "block";
      ratio = window.devicePixelRatio || 1;
      canvas.width = w * ratio;
      return canvas.height = h * ratio;
    };
    update = function(wrap, _, newModel){
      if (wrap.__chart) {
        wrap.__chart.clear().destroy();
        setWrapSize(wrap, newModel);
        wrap.__chart = genLineChart(newModel, wrap.firstChild);
      }
      return wrap;
    };
    render = function(model){
      var wrap, canvas;
      wrap = createNode("div");
      canvas = NativeElement.createNode('canvas');
      wrap.appendChild(canvas);
      setWrapSize(wrap, model);
      setTimeout(function(){
        return wrap.__chart = genLineChart(model, canvas);
      }, 0);
      update(wrap, model, model);
      return wrap;
    };
    showRGBA = function(arg$){
      var _0, _1, _2, _3;
      _0 = arg$._0, _1 = arg$._1, _2 = arg$._2, _3 = arg$._3;
      return "rgba(" + _0 + "," + _1 + "," + _2 + "," + _3 + ")";
    };
    lineChartRaw = function(w, h, data, options){
      return A3(NativeElement.newElement, w, h, {
        ctor: 'Custom',
        type: 'Chart',
        render: render,
        update: update,
        model: {
          w: w,
          h: h,
          data: data,
          options: options
        }
      });
    };
    return localRuntime.Native.Chartjs.values = {
      toArray: toArray,
      showRGBA: showRGBA,
      lineChartRaw: F4(lineChartRaw)
    };
  });
}).call(this);
